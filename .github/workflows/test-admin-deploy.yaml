name: Deploy test admin environment

on:
  pull_request:
    branches:
      - main

env:
  AWS_DEFAULT_REGION: ca-central-1
  FUNCTION_NAME: "notify-admin-pr"
  IMAGE: notify/admin
  REGISTRY: 239043911459.dkr.ecr.ca-central-1.amazonaws.com
  ROLE_ARN: arn:aws:iam::239043911459:role/notify-admin-pr

jobs:
  build-and-push-container:
    runs-on: ubuntu-latest
    steps:
      - name: Set envs
        run: echo "PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325 # v2.2.1

      - name: Move dockerignore
        run: |
          mv ci/Dockerfile.lambda.dockerignore .

      - name: Build base image
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5 # v3.2.0
        with:
          context: .
          file: ci/Dockerfile.lambda
          target: base
          push: false
          cache-from: |
            type=gha,scope=base
          cache-to: |
            type=gha,scope=base

      - name: Build and push lambda image
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5 # v3.2.0
        with:
          context: .
          file: ci/Dockerfile.lambda
          target: lambda
          push: true
          cache-from: |
            type=gha,scope=base
            type=gha,scope=lambda
          cache-to: |
            type=gha,scope=lambda
          build-args: |
            GIT_SHA=${{ github.sha }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.PR_NUMBER }}

      - name: Delete old images
        run: |
          IMAGES_TO_DELETE="$(aws ecr list-images --repository-name $IMAGE --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json)"
          aws ecr batch-delete-image \
            --repository-name $IMAGE \
            --image-ids "$IMAGES_TO_DELETE" || true

      - name: Logout of Amazon ECR
        run: docker logout $REGISTRY

  deploy-test-admin:
    runs-on: ubuntu-latest
    needs: build-and-push-container
    steps:
      - name: Set envs
        run: echo "PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Create/Update lambda function
        run: |
          if aws lambda get-function --function-name $FUNCTION_NAME-$PR_NUMBER > /dev/null 2>&1; then
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME-$PR_NUMBER \
              --image-uri $REGISTRY/$IMAGE:$PR_NUMBER > /dev/null 2>&1

          else
            aws lambda create-function \
              --function-name $FUNCTION_NAME-$PR_NUMBER \
              --package-type Image \
              --role $ROLE_ARN \
              --timeout 15 \
              --memory-size 1024 \
              --code ImageUri=$REGISTRY/$IMAGE:$PR_NUMBER \
              --description "$GITHUB_REPOSITORY/pull/$PR_NUMBER" > /dev/null 2>&1

            aws lambda wait function-active --function-name $FUNCTION_NAME-$PR_NUMBER
            aws lambda add-permission \
              --function-name $FUNCTION_NAME-$PR_NUMBER \
              --statement-id FunctionURLAllowPublicAccess \
              --action lambda:InvokeFunctionUrl \
              --principal "*" \
              --function-url-auth-type NONE > /dev/null 2>&1

            URL="$(aws lambda create-function-url-config --function-name $FUNCTION_NAME-$PR_NUMBER --auth-type NONE | jq .FunctionUrl)"
            echo "URL=$URL" >> $GITHUB_ENV

            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME-$PR_NUMBER \
              --environment "Variables={\
                NOTIFY_ENVIRONMENT=staging,\
                FLASK_APP=application.py,\
                IP_GEOLOCATE_SERVICE=False,\
                REDIS_ENABLED=False,\
                SENDING_DOMAIN=staging.notification.cdssandbox.xyz,\
                API_HOST_NAME=https://api.staging.notification.cdssandbox.xyz,\
                ADMIN_BASE_URL=$URL
              }" > /dev/null 2>&1

            aws logs create-log-group --log-group-name /aws/lambda/$FUNCTION_NAME-$PR_NUMBER > /dev/null 2>&1
            aws logs put-retention-policy --log-group-name /aws/lambda/$FUNCTION_NAME-$PR_NUMBER --retention-in-days 14 > /dev/null 2>&1
          fi

          aws lambda wait function-updated --function-name $FUNCTION_NAME-$PR_NUMBER
          aws lambda put-function-concurrency \
            --function-name $FUNCTION_NAME-$PR_NUMBER \
            --reserved-concurrent-executions 5

      - name: Update PR
        if: env.URL != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## :test_tube: Review environment\n${process.env.URL.slice(1, -1)}`
            })
