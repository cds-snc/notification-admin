ARG APP_DIR="/app"
ARG APP_VENV="${APP_DIR}/.venv"
ARG POETRY_HOME="/opt/poetry"
ARG POETRY_VERSION="1.7.1"
ARG POETRY_VIRTUALENVS_CREATE="false"

# Build image
FROM python:3.12-alpine3.20@sha256:25849f9599e06dfe4d11b552e06f5ac4cc2ad342054eb81f7877e611f6f87c66 as base

ARG APP_DIR
ARG APP_VENV
ARG POETRY_HOME
ARG POETRY_VERSION
ARG POETRY_VIRTUALENVS_CREATE

ENV POETRY_HOME=${POETRY_HOME}
ENV POETRY_VERSION=${POETRY_VERSION}
ENV POETRY_VIRTUALENVS_CREATE=${POETRY_VIRTUALENVS_CREATE}
ENV PATH="${POETRY_HOME}/bin:$PATH"

RUN apk add --no-cache \
    autoconf \
    automake \
    bash \
    build-base \
    cmake \
    g++ \
    git \
    libffi-dev \
    libtool \
    libxml2-dev \
    libxslt-dev \
    nodejs \
    npm \
    make \
    rust \
    cargo

# wheel requires rustc 1.70 or later so we'll pull it in from the 3.18 package repo
# We could update the base image to 3.18 but libexecinfo-dev was dropped in 3.17, so
# either way we need to pull a package in from a different repo to build the base image
RUN apk add --no-cache --update --repository=https://dl-cdn.alpinelinux.org/alpine/v3.16/main/ libexecinfo-dev

RUN mkdir -p ${APP_DIR}
WORKDIR ${APP_DIR}

# Install Poetry and isolate it from the project
RUN python -m venv ${POETRY_HOME} 
RUN ${POETRY_HOME}/bin/pip3 install --upgrade pip
RUN ${POETRY_HOME}/bin/pip3 install poetry==${POETRY_VERSION} virtualenv==20.30.0

COPY pyproject.toml poetry.lock ${APP_DIR}/

RUN python -m venv ${APP_VENV} \
    && . ${APP_VENV}/bin/activate \
    && poetry install \
    && poetry add wheel awslambdaric

COPY package.json package-lock.json ${APP_DIR}/
RUN npm ci

COPY . ${APP_DIR}
RUN npm run build && \
    rm -rf node_modules

RUN . ${APP_VENV}/bin/activate \
    && poetry run make babel \
    && make generate-version-file

# Final image
FROM python:3.12-alpine3.20@sha256:25849f9599e06dfe4d11b552e06f5ac4cc2ad342054eb81f7877e611f6f87c66 as lambda

ARG APP_DIR
ARG APP_VENV
ARG POETRY_HOME
ARG POETRY_VERSION
ARG POETRY_VIRTUALENVS_CREATE
ARG GIT_SHA

ENV POETRY_HOME=${POETRY_HOME}
ENV POETRY_VERSION=${POETRY_VERSION}
ENV POETRY_VIRTUALENVS_CREATE=${POETRY_VIRTUALENVS_CREATE}

ENV GIT_SHA ${GIT_SHA}
ENV PATH="${APP_VENV}/bin:${POETRY_HOME}/bin/poetry:$PATH"
ENV PORT=6012
ENV PYTHONDONTWRITEBYTECODE 1

RUN apk add --no-cache libstdc++

WORKDIR ${APP_DIR}

COPY --from=base ${APP_DIR} ${APP_DIR}
COPY --from=base ${POETRY_HOME} ${POETRY_HOME}
COPY bin/entry.sh /
COPY bin/sync_lambda_envs.sh /

ENTRYPOINT [ "/entry.sh" ]
CMD [ "application.handler" ]
