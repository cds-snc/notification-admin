ARG APP_DIR="/app"
ARG APP_VENV="${APP_DIR}/.venv"
ARG POETRY_HOME="/opt/poetry"
ARG POETRY_VERSION="1.3.2"
ARG POETRY_VIRTUALENVS_CREATE="false"
ARG PATH="${POETRY_HOME}/bin:$PATH"

# Build image
FROM python:3.10-slim as base

ARG APP_DIR
ARG APP_VENV
ARG POETRY_HOME
ARG POETRY_VERSION
ARG POETRY_VIRTUALENVS_CREATE
ARG PATH

ENV POETRY_HOME=${POETRY_HOME}
ENV POETRY_VERSION=${POETRY_VERSION}
ENV POETRY_VIRTUALENVS_CREATE=${POETRY_VIRTUALENVS_CREATE}
ENV PATH=${PATH}

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    autoconf \
    automake \
    bash \
    build-essential \
    cmake \
    g++ \
    git \
    libexecs-dev \
    libffi-dev \
    libtool \
    libxml2-dev \
    libxslt-dev \
    nodejs \
    npm \
    make

RUN mkdir -p ${APP_DIR}
WORKDIR ${APP_DIR}

# Install Poetry and isolate it from the project
RUN python -m venv ${POETRY_HOME} \
    && ${POETRY_HOME}/bin/pip3 install poetry==${POETRY_VERSION}

COPY pyproject.toml poetry.lock ${APP_DIR}/

RUN python -m venv ${APP_VENV} \
    && . ${APP_VENV}/bin/activate \
    && poetry install \
    && poetry add awslambdaric wheel

COPY package.json package-lock.json .snyk ${APP_DIR}/
RUN npm ci

COPY . ${APP_DIR}
RUN npm run build && \
    rm -rf node_modules

RUN . ${APP_VENV}/bin/activate \
    && poetry run make babel \
    && make generate-version-file

# Final image
FROM python:3.10-alpine3.16@sha256:00be2731a1c650d3573aebd84a46c06f3a3251377323f6f43ff1386e70ea2992 as lambda

# ARG APP_DIR
# ARG APP_VENV
# ARG POETRY_HOME
# ARG POETRY_VERSION
# ARG POETRY_VIRTUALENVS_CREATE
# ARG GIT_SHA
# ARG PATH

# ENV POETRY_HOME=${POETRY_HOME}
# ENV POETRY_VERSION=${POETRY_VERSION}
# ENV POETRY_VIRTUALENVS_CREATE=${POETRY_VIRTUALENVS_CREATE}

# ENV GIT_SHA ${GIT_SHA}
# ENV PATH=${PATH}
# ENV PORT=6012
# ENV PYTHONDONTWRITEBYTECODE 1

# RUN apt-get install -y --no-install-recommends \
#     libstdc++
#     # && apt-get autoremove -y \
#     # && apt-get clean -y \
#     # && rm -rf /var/lib/apt/lists/*

# WORKDIR ${APP_DIR}

# COPY --from=base ${APP_DIR} ${APP_DIR}
# COPY --from=base ${POETRY_HOME} ${POETRY_HOME}
# COPY bin/entry.sh /
# COPY bin/sync_lambda_envs.sh /

# ENTRYPOINT [ "/entry.sh" ]
# CMD [ "application.handler" ]
