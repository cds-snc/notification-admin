const redis = require('redis');

const redisClient = async () => {
    // TODO: Turn this into a fixture?
    const CACHE_KEYS = {
        user: [
            "user-????????-????-????-????-????????????",
        ],
        service: [
            "has_jobs-????????-????-????-????-????????????",
            "service-????????-????-????-????-????????????",
            "service-????????-????-????-????-????????????-templates",
            "service-????????-????-????-????-????????????-data-retention",
            "service-????????-????-????-????-????????????-template-folders",
        ],
        template: [
            "service-????????-????-????-????-????????????-templates",
            "template-????????-????-????-????-????????????-version-*",
            "template-????????-????-????-????-????????????-versions",
        ],
        email_branding: [
            "email_branding",
            "email_branding-None",
            "email_branding-????????-????-????-????-????????????",
        ],
        letter_branding: [
            "letter_branding",
            "letter_branding-????????-????-????-????-????????????",
        ],
        organisation: [
            "organisations",
            "domains",
            "live-service-and-organisation-counts",
        ],
        'gc-articles': [
            "gc-articles--*",
            "gc-articles-fallback--*",
        ]
    };

    const client = redis.createClient({
        url: 'redis://localhost:6380'
    })
        .on('error', err => console.log("Redis Client Error: ", err))
        .on('connect', () => {
            console.log("Redis client is connected")
        });

    try {
        client.connect();
        console.log("Redis client is connected")
    } catch (err) {
        console.log(err)
    }

    const redisClient = {

        async connect() {
            return await client.connect()
        },

        async disconnect() {
            return await client.disconnect();
        },

        async DeleteCacheKeysByPattern(cacheToClear) {
            const keysToDelete = CACHE_KEYS[cacheToClear];

            return await client.del(keysToDelete, (err, reply) => {
                if (err) {
                    console.log(`Redis Error - DeleteCacheKeysByPattern: ${err}`)
                } else {
                    console.log(`Redis Reply - DeleteCacheKeysByPattern: ${reply}`)
                }
            });
        },

        async Delete(key) {
            return await client.del(key, (err, reply) => {
                if (err) {
                    console.log(`Redis Error - Delete: ${err}`)
                } else {
                    console.log(`Redis Reply - Delete: ${reply}`)
                }
            });;
        }
    }
    return redisClient;
}

module.exports = redisClient;