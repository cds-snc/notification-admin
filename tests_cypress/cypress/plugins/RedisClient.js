const redis = require('redis');

const redisClient = async () => {
    // TODO: Turn this into a fixture?
    const CACHE_KEYS = {
        user: [
            "user-????????-????-????-????-????????????",
        ],
        service: [
            "has_jobs-????????-????-????-????-????????????",
            "service-????????-????-????-????-????????????",
            "service-????????-????-????-????-????????????-templates",
            "service-????????-????-????-????-????????????-data-retention",
            "service-????????-????-????-????-????????????-template-folders",
        ],
        template: [
            "service-????????-????-????-????-????????????-templates",
            "template-????????-????-????-????-????????????-version-*",
            "template-????????-????-????-????-????????????-versions",
        ],
        email_branding: [
            "email_branding",
            "email_branding-None",
            "email_branding-????????-????-????-????-????????????",
        ],
        letter_branding: [
            "letter_branding",
            "letter_branding-????????-????-????-????-????????????",
        ],
        organisation: [
            "organisations",
            "domains",
            "live-service-and-organisation-counts",
        ],
        'gc-articles': [
            "gc-articles--*",
            "gc-articles-fallback--*",
        ]
    };

    const client = redis.createClient({
        url: 'redis://localhost:6380'
    })
        .on('error', err => console.log("Redis Client Error: ", err))
        .on('connect', () => {
            console.log("Redis client is connected")
        });

    try {
        client.connect();
        console.log("Redis client is connected")
    } catch (err) {
        console.log(err)
    }

    const redisClient = {

        connect() {
            return new Promise((resolve, reject) => {
                client.connect((err) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                });
            });
        },

        disconnect() {
            return new Promise((resolve, reject) => {
                client.connect((err) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                });
            });
        },

        async DeleteCacheKeysByPattern(cacheToClear) {
            console.log(client.toString())
            console.log('========CacheToClear: ' + cacheToClear);
            const keysToDelete = CACHE_KEYS[cacheToClear];
            console.log("===========CAHCE_KEYS: " + CACHE_KEYS.toString())
            console.log("===========patterns to delete: " + keysToDelete);

            // return new Promise((resolve, reject) => {
            return await client.del(keysToDelete, (err, numDeleted) => {
                if (err) {
                    console.log('Error:', err);
                    reject(err);
                }
                console.log('Number of keys deleted:', numDeleted);
                resolve(numDeleted);
            });
            //});
        }
    }
    return redisClient;
}

module.exports = redisClient;