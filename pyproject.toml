[tool.poetry]
name = "notification-admin"
version = "0.1.0"
description = "Notifications admin application."
authors = ["Canadian Digital Service"]
license = "MIT license"
readme = "README.md"
packages = []

[build-system]
requires = ["poetry-core>=1.7.1"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = "~3.12.7"
apig-wsgi = "2.18.0"
aws-xray-sdk = "^2.14.0"

# PaaS
awscli-cwlogs = "^1.4.6"

Babel = "2.16.0"
blinker = "1.8.2"
boto3 = "1.34.153"


# Pinned dependencies
certifi = "^2024.0.0" # Pinned for security reasons: https://github.com/cds-snc/notification-admin/security/dependabot/169
debugpy = "^1.8.12"
email-validator = "1.3.1"
environs = "9.5.0"
Flask = "2.3.3"
Flask-Babel = "2.0.0"
Flask-Caching = "1.11.1"
Flask-Login = "0.6.3"
Flask-WTF = "1.2.1"
gevent = "23.9.1"
greenlet = "3.1.1"
gunicorn = "22.0.0"
# Putting upgrade on hold due to v1.0.0 using sha512 instead of sha1 by default
itsdangerous = "2.2.0"  # pyup: <1.0.0
newrelic = "10.3.0"
notifications-python-client = "6.4.1"
notifications-utils = { git = "https://github.com/cds-snc/notifier-utils.git", branch = "renovate/pypi-setuptools-vulnerability" }
pwnedpasswords = "2.0.0"
pyexcel = "0.7.0"
pyexcel-io = "0.6.6"
pyexcel-ods3 = "0.6.1"
pyexcel-xls = "0.7.0"
pyexcel-xlsx = "0.6.0"
python-dotenv = "1.0.1"
pytz = "2021.3"
PyYAML = "6.0.2"
redis = "3.5.3" # pinned for now
timeago = "1.0.16"
translate-toolkit = "3.13.2"
types-pyyaml = "^6.0.12.20250516"
ua-parser = "0.18.0"
unidecode = "^1.3.8"
user-agents = "2.2.0"

validators = "^0.28.3"
Werkzeug = "3.0.4"
WTForms = "3.1.2"
xlrd = "1.2.0" # this is pinned so that we can continue to support .xslm files; see https://github.com/pyexcel/pyexcel-xls/issues/53

[tool.poetry.group.test.dependencies]
beautifulsoup4 = "4.12.3"
coveralls = "1.11.1"
freezegun = "1.5.1"
# used for creating manifest file locally
jinja2-cli = { version = "^0.8.2", extras = ["yaml"] }
monkeytype = "23.3.0"
mypy = "1.11.2"
poethepoet = "^0.24.4"
pre-commit = "^3.7.1"
pytest = "8.3.5"
pytest-cov = "2.12.1"
pytest-env = "0.8.2"
pytest-mock = "3.14.0"
pytest-xdist = "2.5.0"
requests-mock = "1.12.1"
ruff = "^0.8.2"
types-beautifulsoup4 = "^4.12.0.6"

# stubs libraries to keep mypy happy
types-python-dateutil = "2.9.0.20241003"
types-pytz = "2021.3.8"
types-requests = "2.32.0.20240914"



[tool.poe.tasks.trace-app]
help = "Runs the app with monkeytype type collection enabled."
shell = """
    monkeytype run -m flask run -p 6012 --host=0.0.0.0
"""


[tool.poe.tasks.trace-tests]
help = "Runs a test suite or single test through MonkeyType, generating a record of type annotation traces monkeytype.sqlite3"
shell = """
    if [ -z "${method}" ]; then
        monkeytype run -m pytest '/tests/app/${test-path}::${method}'
    else
        monkeytype run -m pytest '/tests/app/${test-path}'
    fi
"""
    # Define arguments for trace-tests
    [tool.poe.tasks.trace-tests.args.test-path]
    help = "Path to the test file to run. /tests/app/ can be omitted. e.g. poe trace-tests -p main/test_contact.py"
    options = ["-p", "--path"]
    type = "string"
    required = true

    [tool.poe.tasks.trace-tests.args.method]
    help = "Name of the test method to execute and trace"
    options = ["-m", "--method"]
    type = "string"
    default = ""
    required = false


[tool.poe.tasks.list-modules]
help = "Lists all files and modules that have trace data associated with them in monkeytype.sqlite3"
cmd = "monkeytype list-modules"


# Composite task that uses list-modules to obtain a list of files and modules
[tool.poe.tasks.apply-annotations]
help = "Applies ALL known type annotations stored in monkeytype.sqlite3"
shell = """
    for trace in ${TRACES}
    do
        monkeytype apply $trace
    done
"""
deps = ["list-modules"]
uses = { TRACES = "list-modules"}


[tool.poe.tasks.generate-version-file]
help = "Generate the app version file"
shell = """
    GIT_COMMIT="$(git rev-parse HEAD 2> /dev/null || echo "")"
    DATE="$(date +%Y-%m-%dT%H:%M:%S)"
    APP_VERSION_FILE="app/version.py"
    printf "__commit_sha__ = '${GIT_COMMIT}'\n__time__ = '${DATE}'\n" > ${APP_VERSION_FILE}
"""


[tool.poe.tasks.test]
help = "Runs code linters, npm tests, and python tests for the project."
shell = """
    ./scripts/run_tests.sh
"""


[tool.poe.tasks.babel-test]
help = "Compiles app translations from fr.csv"
shell = """
    pybabel extract -F babel.cfg -k _l -o /tmp/messages.po . && po2csv /tmp/messages.po /tmp/messages.csv
	rm /tmp/messages.po
	python scripts/test-translations.py /tmp/messages.csv
	rm /tmp/messages.csv
"""


[tool.poe.tasks.babel]
help = "Compiles app translations from fr.csv"
shell = """
    python scripts/generate_en_translations.py
	csv2po app/translations/csv/en.csv app/translations/en/LC_MESSAGES/messages.po
	csv2po app/translations/csv/fr.csv app/translations/fr/LC_MESSAGES/messages.po
	pybabel compile -d app/translations
"""


[tool.poe.tasks.search-csv]
help = "Searches translations for the specified list of strings"
script = """
    scripts.search_csv:search_translation_strings(search_terms=keywords)
"""
print_result = true

    [tool.poe.tasks.search-csv.args.keywords]
    help = "Comma separated list of keywords to search by."
    options = ["-k", "--keywords"]
    type = "string"
    required = true


[tool.poe.tasks.lock-deps]
help = "Updates the Poetry lock file. Prevents automatic version bumps by default."
cmd = "poetry lock --no-update"
use_exec = true


[tool.poe.tasks.check-lock]
help = "Checks if the Poetry lock file is in sync with dependencies specified in pyproject.toml."
cmd = "poetry check --lock"
use_exec = true


[tool.poe.tasks.coverage]
help = "Creates a code coverage report. TODO: Is this still needed?"
shell = "coveralls"


[tool.poe.tasks.run-dev]
help = "Runs the app locally. Defaults: port = 6012, host=localhost"
shell = "flask run -p ${port} --host=${host}"
args = { port = { options = ["--port", "-p"], default = "6012"}, host = { options = ["--host", "-h"], default = "localhost"}}


[tool.poe.tasks.format]
help = "Formats the python code with isort, black, and flake8, and checks typing with mypy and formats the JS code with prettier."
shell = """
    ruff check --select I --fix .
    ruff check
    ruff format .
	mypy ./
	npx prettier --write app/assets/javascripts app/assets/stylesheets tests_cypress/cypress/e2e
"""


[tool.poe.tasks.tailwind]
help = "Compiles Tailwind CSS"
shell = "npm run tailwind"

[tool.ruff]
target-version = "py310"
exclude = ["venv*", "__pycache__", "node_modules", "cache", "migrations", "build"]
extend-include = ['(app|migrations|tests)/.*\.pyi?$']
src = ["app", "migrations", "tests"]
# Ruff formatter will wrap lines at a length of 130 characters.
line-length = 130
indent-width = 4

[tool.ruff.lint]
select = [
    # PyFlakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # isort
    "I001",
    "I002"
]
ignore = ["E203", "E501", "E402"]

# Provide line length leeway for docstrings
[tool.ruff.lint.pycodestyle]
max-doc-length = 170
# Enforce doc string format? (google, numpy or pep257)
# convention = "google"

[tool.ruff.format]
# Match black formatting
# Double quotes for strings.
quote-style = "double"
# Indent with spaces, rather than tabs.
indent-style = "space"
# Respect magic trailing commas.
skip-magic-trailing-comma = false
# Automatically detect the appropriate line ending.
line-ending = "auto"
